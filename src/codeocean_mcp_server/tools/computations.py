from codeocean import CodeOcean
from codeocean.computation import Computation, DownloadFileURL, Folder, RunParams
from mcp.server.fastmcp import FastMCP

from codeocean_mcp_server.models import dataclass_to_pydantic

RunParamssModel = dataclass_to_pydantic(RunParams)
FolderModel = dataclass_to_pydantic(Folder)
ComputationModel = dataclass_to_pydantic(Computation)
DownloadFileURLModel = dataclass_to_pydantic(DownloadFileURL)

ADDITIONAL_INSTRUCTIONS = {
    "list_computation_results": " computation_id is required as string"
}


def add_tools(mcp: FastMCP, client: CodeOcean):
    """Add capsule tools to the MCP server."""

    @mcp.tool(description=client.computations.get_computation.__doc__)
    def get_computation(computation_id: str) -> list[ComputationModel]:
        """Retrieve a specific computation by its unique identifier."""
        return client.computations.get_computation(computation_id)

    @mcp.tool(description=client.computations.run_capsule.__doc__)
    def run_capsule(run_params: RunParamssModel) -> FolderModel:
        """Execute a capsule or a pipeline in Code Ocean and don't wait."""
        return client.computations.run_capsule(run_params)

    @mcp.tool(description=client.computations.wait_until_completed.__doc__)
    def wait_until_completed(computation_id: str) -> ComputationModel:
        """Wait until a computation completes and return its details."""
        return client.computations.wait_until_completed(computation_id)

    @mcp.tool(
        description=client.computations.list_computation_results.__doc__
        + ADDITIONAL_INSTRUCTIONS["list_computation_results"]
    )
    def list_computation_results(computation_id: str) -> FolderModel:
        """List the output files generated by a completed computation."""
        return client.computations.list_computation_results(computation_id)

    @mcp.tool(description=client.computations.get_result_file_download_url.__doc__)
    def get_result_file_download_url(
        computation_id: str, file_path: str
    ) -> DownloadFileURLModel:
        """Get the download URL for a specific result file from a computation."""
        return client.computations.get_result_file_download_url(
            computation_id, file_path
        )
